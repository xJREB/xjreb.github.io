{"version":3,"file":"component---src-pages-index-js-3f3c7bc0a67acdb46fa7.js","mappings":"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","sources":["webpack://jreb-cv/../src/image-utils.ts","webpack://jreb-cv/../src/components/hooks.ts","webpack://jreb-cv/../src/components/layout-wrapper.tsx","webpack://jreb-cv/../src/components/picture.tsx","webpack://jreb-cv/../src/components/placeholder.tsx","webpack://jreb-cv/../src/components/main-image.tsx","webpack://jreb-cv/../src/components/gatsby-image.server.tsx","webpack://jreb-cv/../src/components/gatsby-image.browser.tsx","webpack://jreb-cv/../src/components/static-image.server.tsx","webpack://jreb-cv/../src/components/static-image.tsx","webpack://jreb-cv/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://jreb-cv/./src/components/footer.js","webpack://jreb-cv/./src/components/header.js","webpack://jreb-cv/./src/components/layout.js","webpack://jreb-cv/./src/components/gutter/gutter.js","webpack://jreb-cv/./src/components/home-about.js","webpack://jreb-cv/./src/components/home-awards.js","webpack://jreb-cv/./src/components/home-contact.js","webpack://jreb-cv/./src/components/home-research.js","webpack://jreb-cv/./src/components/landing/hero.js","webpack://jreb-cv/./src/components/landing/landing.js","webpack://jreb-cv/./src/pages/index.js","webpack://jreb-cv/./node_modules/react-icons/lib/esm/iconsManifest.js","webpack://jreb-cv/./node_modules/react-icons/lib/esm/iconContext.js","webpack://jreb-cv/./node_modules/react-icons/lib/esm/iconBase.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import { graphql, useStaticQuery } from \"gatsby\";\r\nimport React from \"react\";\r\n\r\nconst Footer = () => {\r\n    const { site } = useStaticQuery(\r\n        graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        author\r\n                    }\r\n                }\r\n            }\r\n        `\r\n    );\r\n    const config = site.siteMetadata;\r\n    return (\r\n        <footer>\r\n            <div className=\"break\"></div>\r\n            <div className=\"footer-content\">\r\n                <div>\r\n                    Made with <a href=\"https://www.gatsbyjs.com\">Gatsby</a>,\r\n                    template adapted from{\" \"}\r\n                    <a href=\"https://knightjdr.github.io/gatsby-starter-scientist\">\r\n                        gatsby-starter-scientist\r\n                    </a>\r\n                </div>\r\n                <div className=\"break\"></div>\r\n                <div>{`© ${new Date().getFullYear()} ${config.author}`}</div>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { FaChalkboardTeacher, FaHome, FaUniversity } from \"react-icons/fa\";\r\nimport { MdLibraryBooks, MdWork } from \"react-icons/md\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"home-link-container\">\r\n                <Link to=\"/\">\r\n                    <FaHome></FaHome>\r\n                    Home\r\n                </Link>\r\n            </div>\r\n            <div className=\"nav-link-container\">\r\n                <Link to=\"/cv/\">\r\n                    <MdWork></MdWork>\r\n                    CV\r\n                </Link>\r\n                <Link to=\"/publications/\">\r\n                    <MdLibraryBooks></MdLibraryBooks>\r\n                    Publications\r\n                </Link>\r\n                <Link to=\"/teaching/\">\r\n                    <FaChalkboardTeacher></FaChalkboardTeacher>\r\n                    Teaching\r\n                </Link>\r\n                <Link to=\"/service/\">\r\n                    <FaUniversity></FaUniversity>\r\n                    Service\r\n                </Link>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { graphql, useStaticQuery } from \"gatsby\";\r\nimport * as React from \"react\";\r\nimport Footer from \"./footer\";\r\nimport Header from \"./header\";\r\nimport \"./layout.css\";\r\n\r\n\r\nconst Layout = ({ pageTitle, children }) => {\r\n    const { site } = useStaticQuery(\r\n        graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n        `\r\n    );\r\n    const { title } = site.siteMetadata;\r\n    return (\r\n        <div>\r\n            <title>{`${title} | ${pageTitle}`}</title>\r\n            <Header />\r\n            <main>{children}</main>\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport \"./gutter.css\";\r\n\r\n\r\nexport const GutterLeft = () => <div className=\"gutter gutter-left\" />;\r\n\r\nexport const GutterRight = () => <div className=\"gutter gutter-right\" />;\r\n","import { StaticImage } from \"gatsby-plugin-image\";\r\nimport React from \"react\";\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h2>About Me</h2>\r\n            <div>\r\n                <StaticImage\r\n                    alt=\"Portrait Justus Bogner\"\r\n                    src=\"../images/jb-portrait.jpg\"\r\n                    className=\"portrait\"\r\n                    formats={[\"auto\", \"webp\", \"avif\"]}\r\n                />\r\n                <p>\r\n                    Hi! I'm Justus, a researcher in{\" \"}\r\n                    <i>empirical software engineering</i>. I also teach software\r\n                    engineering courses at the university and as a trainer for\r\n                    companies. Before and during my PhD, I was employed for more\r\n                    than 9 years as a software engineer in the industry,\r\n                    building mostly web- and service-based enterprise\r\n                    applications.\r\n                </p>\r\n                <p>\r\n                    In May 2020, I received my PhD in Computer Science (Dr. rer.\r\n                    nat.) from the University of Stuttgart, Germany. My advisors\r\n                    were Prof. Dr. Alfred Zimmermann and Prof. Dr. Stefan\r\n                    Wagner, with Prof. Dr. Cesare Pautasso as external reviewer.\r\n                    Currently, I'm a postdoc at the Institute of Software\r\n                    Engineering at the University of Stuttgart. Within Prof.\r\n                    Wagner's{\" \"}\r\n                    <a href=\"https://www.iste.uni-stuttgart.de/ese\">\r\n                        Empirical Software Engineering Group\r\n                    </a>\r\n                    , I lead the division \"Software Engineering for AI- &\r\n                    Microservice-Based Systems\" (SE4AI&MS). I regularly review\r\n                    for journals, conferences, and workshops, such as IEEE TSE,\r\n                    PeerJ CS, IEEE Software, Wiley SPE, ECSA, Euromicro SEAA, or XP. I am also\r\n                    a co-organizer of the{\" \"}\r\n                    <a href=\"https://saml.disim.univaq.it/saml2022/\">\r\n                        SAML workshop\r\n                    </a>\r\n                    , which combines software architecture and machine learning.\r\n                    Lastly, I'm part of the student admission committee for the\r\n                    M.Sc. study programme \"Software Engineering\" in my\r\n                    department.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { FaAward } from \"react-icons/fa\";\r\n\r\nconst Awards = () => {\r\n    return (\r\n        <div>\r\n            <h2>\r\n                <FaAward></FaAward> Awards\r\n            </h2>\r\n            <div>\r\n                <p>I have won the following awards:</p>\r\n\r\n                <p>\r\n                    <strong>Best Reviewer Award</strong>\r\n                    <br />\r\n                    At the European Conference on Software Architecture (ECSA),\r\n                    2022\r\n                </p>\r\n\r\n                <p>\r\n                    <strong>infos Dissertation Award</strong>\r\n                    <br />\r\n                    From the Informatik Forum Stuttgart, 2021, for my PhD\r\n                    thesis:\r\n                    <br />\r\n                    <a href=\"http://dx.doi.org/10.18419/opus-10950\">\r\n                        \"On the Evolvability Assurance of Microservices:\r\n                        Metrics, Scenarios, and Patterns\"\r\n                    </a>\r\n                </p>\r\n\r\n                <p>\r\n                    <strong>Best Presentation Award</strong>\r\n                    <br />\r\n                    At the International Conference on Technical Debt\r\n                    (TechDebt), 2021, for the paper:\r\n                    <br />\r\n                    <a href=\"https://doi.org/10.1109/TechDebt52882.2021.00016\">\r\n                        \"Characterizing Technical Debt and Antipatterns in\r\n                        AI-Based Systems: A Systematic Mapping Study\"\r\n                    </a>\r\n                </p>\r\n\r\n                <p>\r\n                    <strong>IEEE TCSE Distinguished Paper Award</strong>\r\n                    <br />\r\n                    At the International Conference on Software Maintenance and\r\n                    Evolution (ICSME), 2019, for the paper:\r\n                    <br />\r\n                    <a href=\"https://doi.org/10.1109/ICSME.2019.00089\">\r\n                        \"Assuring the Evolvability of Microservices: Insights\r\n                        into Industry Practices and Challenges\"\r\n                    </a>\r\n                </p>\r\n\r\n                <p>\r\n                    <strong>Best Student Paper Award</strong>\r\n                    <br />\r\n                    At the European Conference on Service-Oriented and Cloud\r\n                    Computing (ESOCC), 2018, for the paper:\r\n                    <br />\r\n                    <a href=\"https://doi.org/10.1007/978-3-030-63161-1_10\">\r\n                        \"Towards an Evolvability Assurance Method for\r\n                        Service-Based Systems\"\r\n                    </a>\r\n                </p>\r\n\r\n                <p>\r\n                    <strong>Best Presentation Award</strong>\r\n                    <br />\r\n                    At the Central European Workshop on Services and their\r\n                    Composition (ZEUS), 2018, for the paper:\r\n                    <br />\r\n                    <a href=\"http://ceur-ws.org/Vol-2072/paper2.pdf\">\r\n                        \"Analyzing the Relevance of SOA Patterns for\r\n                        Microservice-Based Systems\"\r\n                    </a>\r\n                </p>\r\n\r\n                <p>\r\n                    <strong>Master Thesis Award</strong>\r\n                    <br />\r\n                    From the Herman Hollerith Center, 2015, for my M.Sc. thesis:\r\n                    <br />\r\n                    \"Identifying Relevant Software Architecture Patterns for IT\r\n                    Service Monitoring and Reporting Solutions\"\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Awards;\r\n","import { graphql, useStaticQuery } from \"gatsby\";\r\nimport React from \"react\";\r\nimport {\r\n    FaGithub,\r\n    FaMailBulk,\r\n    FaMastodon,\r\n    FaResearchgate,\r\n    FaTwitter,\r\n} from \"react-icons/fa\";\r\nimport { MdEmail } from \"react-icons/md\";\r\nimport { SiGooglescholar } from \"react-icons/si\";\r\n\r\nconst Footer = () => {\r\n    const { site } = useStaticQuery(\r\n        graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        author\r\n                        social {\r\n                            twitter\r\n                            mastodon\r\n                            github\r\n                            email\r\n                            researchgate\r\n                            googleScholar\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `\r\n    );\r\n    const config = site.siteMetadata;\r\n    const { twitter, mastodon, github, email, researchgate, googleScholar } =\r\n        config.social;\r\n    return (\r\n        <div>\r\n            <h2>\r\n                <FaMailBulk></FaMailBulk> Contact\r\n            </h2>\r\n            <div>\r\n                <p>You can reach or follow me via the following ways:</p>\r\n                <MdEmail></MdEmail> Email:{\" \"}\r\n                <a href={`mailto:${email}`}>{email}</a>\r\n                <br />\r\n                <FaMastodon></FaMastodon> Mastodon:{\" \"}\r\n                <a href={mastodon} rel=\"me\">\r\n                    {mastodon.substring(mastodon.indexOf(\"//\") + 2)}\r\n                </a>\r\n                <br />\r\n                <FaTwitter></FaTwitter> Twitter:{\" \"}\r\n                <a href={twitter}>\r\n                    {twitter.substring(twitter.indexOf(\".com/\") + 5)}\r\n                </a>\r\n                <br />\r\n                <FaGithub></FaGithub> GitHub:{\" \"}\r\n                <a href={github}>\r\n                    {github.substring(github.indexOf(\".com/\") + 5)}\r\n                </a>\r\n                <br />\r\n                <FaResearchgate></FaResearchgate> Researchgate:{\" \"}\r\n                <a href={researchgate}>{config.author}</a>\r\n                <br />\r\n                <SiGooglescholar></SiGooglescholar> Google Scholar:{\" \"}\r\n                <a href={googleScholar}>{config.author}</a>\r\n                <p>\r\n                    If you have questions about my research, want to write your\r\n                    student thesis with me, or have an idea for a study\r\n                    collaboration related to my research interest, feel free to\r\n                    reach out!\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { Link } from \"gatsby\";\r\nimport { StaticImage } from \"gatsby-plugin-image\";\r\nimport React from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\n\r\nconst Research = () => {\r\n    return (\r\n        <div>\r\n            <h2>\r\n                <FaSearch></FaSearch> Research\r\n            </h2>\r\n            <div>\r\n                <p>\r\n                    To study and improve software engineering, I apply both\r\n                    quantitative and qualitative{\" \"}\r\n                    <strong>empirical methods</strong>, such as controlled\r\n                    experiments, systematic literature reviews, surveys,\r\n                    interviews, repository mining, or case studies. Based on\r\n                    these results, I then create and evaluate tools or methods\r\n                    to support software professionals. While I conducted studies\r\n                    in other areas, my two main SE knowledge areas are{\" \"}\r\n                    <strong>software architecture</strong> and{\" \"}\r\n                    <strong>software quality</strong>, especially\r\n                    maintainability, evolvability, and technical debt. Moreover,\r\n                    I mainly study two types of systems described below. For\r\n                    more details, please refer to my{\" \"}\r\n                    <Link to=\"/publications/\">publications</Link>.\r\n                </p>\r\n\r\n                <div>\r\n                    <h3>Microservice-based Systems</h3>\r\n                    <figure className=\"research-images\">\r\n                        <StaticImage\r\n                            alt=\"Microservices\"\r\n                            src=\"../images/microservices.png\"\r\n                            formats={[\"auto\", \"webp\", \"avif\"]}\r\n                        />\r\n                        <figcaption>\r\n                            Microservices, based on <br />\r\n                            <a href=\"https://www.martinfowler.com/articles/microservices.html\">\r\n                                Martin Fowler's article\r\n                            </a>\r\n                            .\r\n                        </figcaption>\r\n                    </figure>\r\n                    <p>\r\n                        In my{\" \"}\r\n                        <a href=\"http://dx.doi.org/10.18419/opus-10950\">\r\n                            PhD thesis\r\n                        </a>\r\n                        , I studied the evolvability assurance of the\r\n                        architectural style <strong>microservices</strong>, and\r\n                        approached the topic via metrics, scenario-based\r\n                        evaluation, and (anti-)patterns. While I still continue\r\n                        parts of this line of research, I'm also interested in\r\n                        microservices migration, the design of RESTful APIs, and\r\n                        web-based applications in general.\r\n                    </p>\r\n                </div>\r\n\r\n                <div>\r\n                    <h3>AI-based Systems</h3>\r\n                    <figure className=\"research-images\">\r\n                        <StaticImage\r\n                            alt=\"AI-based systems\"\r\n                            src=\"../images/ai-based-systems.jpg\"\r\n                            formats={[\"auto\", \"webp\", \"avif\"]}\r\n                        />\r\n                        <figcaption>\r\n                            Artificial Intelligence,\r\n                            <br />\r\n                            photo by{\" \"}\r\n                            <a href=\"https://www.pexels.com/photo/love-art-earth-summer-8849282/\">\r\n                                Tara Winstead\r\n                            </a>\r\n                            .\r\n                        </figcaption>\r\n                    </figure>\r\n                    <p>\r\n                        After my PhD, I also broadened my scope with an\r\n                        additional research area: software engineering for\r\n                        AI-based systems (SE4AI). Here, I am mostly interested\r\n                        in the development process, architecture, and quality\r\n                        assurance of systems with AI components, e.g., systems\r\n                        which include one or more machine learning models.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Research;\r\n","import { StaticImage } from \"gatsby-plugin-image\";\r\nimport React from \"react\";\r\n\r\nconst Hero = ({ children }) => {\r\n    return (\r\n        <div style={{ display: \"grid\" }}>\r\n            <StaticImage\r\n                style={{\r\n                    gridArea: \"1/1\",\r\n                    maxHeight: \"400px\",\r\n                }}\r\n                layout=\"fullWidth\"\r\n                alt=\"Header Image\"\r\n                src=\"../../images/hero.jpg\"\r\n                formats={[\"auto\", \"webp\", \"avif\"]}\r\n            />\r\n            <div\r\n                style={{\r\n                    gridArea: \"1/1\",\r\n                    position: \"relative\",\r\n                    placeItems: \"center\",\r\n                    display: \"grid\",\r\n                    color: \"var(--color-font-light)\",\r\n                    maxWidth: \"1080px\",\r\n                }}\r\n            >\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Hero;\r\n","import { graphql, Link, useStaticQuery } from \"gatsby\";\r\nimport React from \"react\";\r\nimport Hero from \"./hero\";\r\n\r\nconst Landing = () => {\r\n    const { site } = useStaticQuery(\r\n        graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        author\r\n                        description\r\n                    }\r\n                }\r\n            }\r\n        `\r\n    );\r\n\r\n    const { author, description } = site.siteMetadata;\r\n\r\n    return (\r\n        <div className=\"landing\">\r\n            <Hero>\r\n                <div>\r\n                    <h1>Dr. {author}</h1>\r\n                    <p>{description}</p>\r\n                    <div className=\"landing-links\">\r\n                        <Link to=\"/#contact\">Contact</Link>\r\n                        <Link to=\"/#research\">Research</Link>\r\n                        <Link to=\"/#awards\">Awards</Link>\r\n                    </div>\r\n                </div>\r\n            </Hero>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","import * as React from \"react\";\r\nimport { GutterLeft, GutterRight } from \"../components/gutter/gutter\";\r\nimport About from \"../components/home-about\";\r\nimport Awards from \"../components/home-awards\";\r\nimport Contact from \"../components/home-contact\";\r\nimport Research from \"../components/home-research\";\r\nimport Landing from \"../components/landing/landing\";\r\nimport Layout from \"../components/layout\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <Layout pageTitle=\"Home Page\">\r\n            <Landing />\r\n            <div className=\"home-layout\">\r\n                <GutterLeft />\r\n                <div className=\"home-inner\">\r\n                    <section className=\"about\">\r\n                        <About></About>\r\n                    </section>\r\n\r\n                    <section className=\"contact\" id=\"contact\">\r\n                        <Contact></Contact>\r\n                    </section>\r\n\r\n                    <section className=\"research\" id=\"research\">\r\n                        <Research></Research>\r\n                    </section>\r\n\r\n                    <section className=\"awards\" id=\"awards\">\r\n                        <Awards></Awards>\r\n                    </section>\r\n                </div>\r\n                <GutterRight />\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n\r\nexport const Head = () => (\r\n    <>\r\n        <meta\r\n            name=\"google-site-verification\"\r\n            content=\"Z5awUoZA4VyZVQddqZ4j0rW_uitttNkElEFSZ9qYaNk\"\r\n        />\r\n    </>\r\n);\r\n","export var IconsManifest = [\n  {\n    \"id\": \"ci\",\n    \"name\": \"Circum Icons\",\n    \"projectUrl\": \"https://circumicons.com/\",\n    \"license\": \"MPL-2.0 license\",\n    \"licenseUrl\": \"https://github.com/Klarr-Agency/Circum-Icons/blob/main/LICENSE\"\n  },\n  {\n    \"id\": \"fa\",\n    \"name\": \"Font Awesome\",\n    \"projectUrl\": \"https://fontawesome.com/\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  },\n  {\n    \"id\": \"io\",\n    \"name\": \"Ionicons 4\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"io5\",\n    \"name\": \"Ionicons 5\",\n    \"projectUrl\": \"https://ionicons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"md\",\n    \"name\": \"Material Design icons\",\n    \"projectUrl\": \"http://google.github.io/material-design-icons/\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"https://github.com/google/material-design-icons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"ti\",\n    \"name\": \"Typicons\",\n    \"projectUrl\": \"http://s-ings.com/typicons/\",\n    \"license\": \"CC BY-SA 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n  },\n  {\n    \"id\": \"go\",\n    \"name\": \"Github Octicons icons\",\n    \"projectUrl\": \"https://octicons.github.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/primer/octicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"fi\",\n    \"name\": \"Feather\",\n    \"projectUrl\": \"https://feathericons.com/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/feathericons/feather/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"gi\",\n    \"name\": \"Game Icons\",\n    \"projectUrl\": \"https://game-icons.net/\",\n    \"license\": \"CC BY 3.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/\"\n  },\n  {\n    \"id\": \"wi\",\n    \"name\": \"Weather Icons\",\n    \"projectUrl\": \"https://erikflowers.github.io/weather-icons/\",\n    \"license\": \"SIL OFL 1.1\",\n    \"licenseUrl\": \"http://scripts.sil.org/OFL\"\n  },\n  {\n    \"id\": \"di\",\n    \"name\": \"Devicons\",\n    \"projectUrl\": \"https://vorillaz.github.io/devicons/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ai\",\n    \"name\": \"Ant Design Icons\",\n    \"projectUrl\": \"https://github.com/ant-design/ant-design-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"bs\",\n    \"name\": \"Bootstrap Icons\",\n    \"projectUrl\": \"https://github.com/twbs/icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"ri\",\n    \"name\": \"Remix Icon\",\n    \"projectUrl\": \"https://github.com/Remix-Design/RemixIcon\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"fc\",\n    \"name\": \"Flat Color Icons\",\n    \"projectUrl\": \"https://github.com/icons8/flat-color-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"gr\",\n    \"name\": \"Grommet-Icons\",\n    \"projectUrl\": \"https://github.com/grommet/grommet-icons\",\n    \"license\": \"Apache License Version 2.0\",\n    \"licenseUrl\": \"http://www.apache.org/licenses/\"\n  },\n  {\n    \"id\": \"hi\",\n    \"name\": \"Heroicons\",\n    \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"hi2\",\n    \"name\": \"Heroicons 2\",\n    \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"si\",\n    \"name\": \"Simple Icons\",\n    \"projectUrl\": \"https://simpleicons.org/\",\n    \"license\": \"CC0 1.0 Universal\",\n    \"licenseUrl\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n  },\n  {\n    \"id\": \"sl\",\n    \"name\": \"Simple Line Icons\",\n    \"projectUrl\": \"https://thesabbir.github.io/simple-line-icons/\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"im\",\n    \"name\": \"IcoMoon Free\",\n    \"projectUrl\": \"https://github.com/Keyamoon/IcoMoon-Free\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://github.com/Keyamoon/IcoMoon-Free/blob/master/License.txt\"\n  },\n  {\n    \"id\": \"bi\",\n    \"name\": \"BoxIcons\",\n    \"projectUrl\": \"https://github.com/atisawd/boxicons\",\n    \"license\": \"CC BY 4.0 License\",\n    \"licenseUrl\": \"https://github.com/atisawd/boxicons/blob/master/LICENSE\"\n  },\n  {\n    \"id\": \"cg\",\n    \"name\": \"css.gg\",\n    \"projectUrl\": \"https://github.com/astrit/css.gg\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"vsc\",\n    \"name\": \"VS Code Icons\",\n    \"projectUrl\": \"https://github.com/microsoft/vscode-codicons\",\n    \"license\": \"CC BY 4.0\",\n    \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n  },\n  {\n    \"id\": \"tb\",\n    \"name\": \"Tabler Icons\",\n    \"projectUrl\": \"https://github.com/tabler/tabler-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n  },\n  {\n    \"id\": \"tfi\",\n    \"name\": \"Themify Icons\",\n    \"projectUrl\": \"https://github.com/lykmapipo/themify-icons\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/thecreation/standard-icons/blob/master/modules/themify-icons/LICENSE\"\n  },\n  {\n    \"id\": \"rx\",\n    \"name\": \"Radix Icons\",\n    \"projectUrl\": \"https://icons.radix-ui.com\",\n    \"license\": \"MIT\",\n    \"licenseUrl\": \"https://github.com/radix-ui/icons/blob/master/LICENSE\"\n  }\n]","import React from \"react\";\nexport var DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nexport var IconContext = React.createContext && React.createContext(DefaultContext);","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from \"react\";\nimport { IconContext, DefaultContext } from \"./iconContext\";\nfunction Tree2Element(tree) {\n  return tree && tree.map(function (node, i) {\n    return React.createElement(node.tag, __assign({\n      key: i\n    }, node.attr), Tree2Element(node.child));\n  });\n}\nexport function GenIcon(data) {\n  // eslint-disable-next-line react/display-name\n  return function (props) {\n    return React.createElement(IconBase, __assign({\n      attr: __assign({}, data.attr)\n    }, props), Tree2Element(data.child));\n  };\n}\nexport function IconBase(props) {\n  var elem = function (conf) {\n    var attr = props.attr,\n      size = props.size,\n      title = props.title,\n      svgProps = __rest(props, [\"attr\", \"size\", \"title\"]);\n    var computedSize = size || conf.size || \"1em\";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + \" \" : \"\") + props.className;\n    return React.createElement(\"svg\", __assign({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: __assign(__assign({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), title && React.createElement(\"title\", null, title), props.children);\n  };\n  return IconContext !== undefined ? React.createElement(IconContext.Consumer, null, function (conf) {\n    return elem(conf);\n  }) : elem(DefaultContext);\n}"],"names":["height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","srcSet","decoding","undefined","fallback","t","s","sizes","Image","length","map","media","type","key","fallbackImage","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","as","className","class","preactClass","onStartLoad","onLoad","onError","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__imageData","imageData","__error","console","StaticImage","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","site","useStaticQuery","config","siteMetadata","href","Date","getFullYear","author","Link","to","pageTitle","title","GutterLeft","GutterRight","S","formats","twitter","mastodon","github","email","researchgate","googleScholar","social","rel","substring","indexOf","gridArea","maxHeight","placeItems","color","description","id","Head","name","content","DefaultContext","size","attr","IconContext","__assign","n","arguments","p","hasOwnProperty","call","apply","this","__rest","e","getOwnPropertySymbols","propertyIsEnumerable","Tree2Element","tree","node","tag","child","GenIcon","data","IconBase","elem","conf","svgProps","computedSize","stroke","fill","strokeWidth","xmlns","Consumer"],"sourceRoot":""}